#include <iostream>
#include <stack>
#include <string>
using namespace std;

class Calculator {
private:
    string infix;
    string postfix;
    char delimeter = '$';
public:
    string infixToPostfix();
    int evaluatePostfix();
    void setInfix(string s);
};

void Calculator::setInfix(string s) {
    infix = "";

    for (int i = 0; i < s.size(); i++) {
        string operand;
        int ascii = (int)s[i];

        if (ascii >= 48 && ascii <= 57) {
            while (i < s.size() && isdigit(s[i])) {
                operand += s[i];
                i++;
            }
            infix += operand + delimeter;
            i--;
        }
        else {
            infix += s[i];
        }
    }
    cout << "Infix with delimiters: " << infix << endl;
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

string Calculator::infixToPostfix() {
    stack<string> exp;
    stack<char> op;

    for (int i = 0; i < infix.size(); i++) {
        int asciiValue = (int)infix[i];
        if (infix[i] == delimeter) {
            continue;
        }
        if (asciiValue >= 48 && asciiValue <= 57) {
            string n;
            while (i < infix.size() && infix[i] != delimeter) {
                n += infix[i];
                i++;
            }
            exp.push(n);
        }
        else if (infix[i] == '(') {
            op.push(infix[i]);
        }
        else if (infix[i] == ')') {
            while (!op.empty() && op.top() != '(') {
                string v2 = exp.top();
                exp.pop();
                string v1 = exp.top();
                exp.pop();
                string n = v1 + " " + v2 + " " + op.top();
                exp.push(n);
                op.pop();
            }
            op.pop(); 
        }
        else {
            while (!op.empty() && precedence(op.top()) >= precedence(infix[i])) {
                string v2 = exp.top();
                exp.pop();
                string v1 = exp.top();
                exp.pop();
                string n = v1 + " " + v2 + " " + op.top();
                exp.push(n);
                op.pop();
            }
            op.push(infix[i]);
        }
    }

    while (!op.empty()) {
        string v2 = exp.top();
        exp.pop();
        string v1 = exp.top();
        exp.pop();
        string n = v1 + " " + v2 + " " + op.top();
        exp.push(n);
        op.pop();
    }

    postfix = exp.top();
    return postfix;
}

int Calculator::evaluatePostfix() {
    stack<int> exp;
    for (int i = 0; i < postfix.size(); i++) {
        if (postfix[i] == ' ') { continue; }
        int ascii = (int)postfix[i];
        string n;
        if (ascii >= 48 && ascii <= 57) {
            while (i < postfix.size() && postfix[i] != ' ') {
                n += postfix[i++];
            }
            int c = stoi(n);
            exp.push(c);
        }
        else {
            int v2 = exp.top();
            exp.pop();
            int v1 = exp.top();
            exp.pop();
            if (postfix[i] == '+') exp.push(v1 + v2);
            if (postfix[i] == '-') exp.push(v1 - v2);
            if (postfix[i] == '*') exp.push(v1 * v2);
            if (postfix[i] == '/') exp.push(v1 / v2);
        }
    }
    return exp.top();
}

int main() {
    Calculator c1;
    int choice;
    string input;

    do {
        cout << "1. infix to postfix conversion" << endl;
        cout << "2. evaluate postfix expression" << endl;
        cout << "3. exit" << endl;
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter an infix expression (without spaces): ";
            cin >> input;
            c1.setInfix(input);
            cout << "Converting infix to postfix..." << endl;
            cout << "Postfix expression: " << c1.infixToPostfix() << endl;
            break;
        case 2:
            cout << "Evaluating postfix expression..." << endl;
            cout << "Ans: " << c1.evaluatePostfix() << endl;
            break;
        case 3:
            cout << "BYE :)" << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }

    } while (choice != 3);

    return 0;
}
