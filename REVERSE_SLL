#include<iostream>
using namespace std;
class Node {
	int data;
	Node* prev;
	Node* next;
public:
	Node()
	{
		data = 0;
		prev = NULL;
		next = NULL;
	}
	Node(int d)
	{
		data =  d;
		prev = NULL;
		next = NULL;
	}
	void append(Node*& head, int d)
	{
		if (head == NULL)
		{
			Node* temp = new Node(d);
			head = temp;
			return;
		}
		else {
			Node* temp = head;
			while (temp->next != NULL)
			{
				temp = temp->next;
			}
			Node* newNode = new Node(d);
			newNode->prev = temp;
			temp->next = newNode;
			return;
		}
	}
	void show(Node*& head)
	{
		if (head == NULL)
		{
			cout << "NO LIST FOUND " << endl;
		}
		else {
			Node* temp = head;
			while (temp != NULL)
			{
				cout << temp->data << " ";
				temp = temp->next;
			}
			cout << endl;
		}
	}
	void reverse(Node*& head)
	{
		Node* prev = NULL;
		Node* current = head;
		Node* after = NULL;
		while (current != NULL)
		{
			// save the next node
			after = current->next;
			// changing the Nodes position 
			current->next = prev;
			current->prev = after;
			

			// moving the prev and current one step forward
			prev = current;
			current = after;
			

		}
		// store the new head
		head = prev;
		
	}
};
int main()
{
	Node* head = NULL;
	Node* node = new Node();
	
	for (int i = 0; i < 5; i++)
	{
		node->append(head, i + 1);
	}

	node->show(head);
	node->reverse(head);
	node->show(head);
}
