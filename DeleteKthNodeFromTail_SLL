#include<iostream>
using namespace std;
class Node {
	int data;
	Node* prev;
	Node* next;
public:
	Node()
	{
		data = 0;
		prev = NULL;
		next = NULL;
	}
	Node(int d)
	{
		data = d;
		prev = NULL;
		next = NULL;
	}
	void append(Node*& head, Node*& tail, int d)
	{
		if (head == NULL)
		{
			Node* temp = new Node(d);
			head = tail = temp;
			return;
		}
		else {
			Node* newNode = new Node(d);
			Node* temp = tail;
			temp->next = newNode;
			newNode->prev = temp;
			tail = tail->next;
		}
	}
	void deleteKthFromTail(Node*& head, Node*& tail, int k)
	{
		if (head == NULL)
		{
			cout << "NO LIST FOUND " << endl;
			return;
		}
		else if (head->next == NULL)
		{
			delete head;
			head = tail = nullptr;
		}
		else if (k == 1)
		{
			Node* temp = tail->prev;
			delete tail;
			tail = temp;
			return;
		}
		else {
			Node* temp = head;
			int cnt = 0;
			while (temp != NULL)
			{
				temp = temp->next;
				cnt++;
			}
			cout << cnt << endl;
			if (k > cnt)
			{
				return;
			}
			int i = 1;
			temp = head;
			int ite = cnt - k;
			while (i < ite )
			{
				temp = temp->next;
				i++;
			}
			Node* todel = temp->next;
			todel->next->prev = todel->prev;
			todel->prev->next = todel->next;
			delete todel;
		}
	}
	void show(Node*& head)
	{
		if (head == NULL)
		{
			cout << "NO LIST FOUND " << endl;
		}
		else {
			Node* temp = head;
			while (temp != NULL)
			{
				cout << temp->data << " ";
				temp = temp->next;
			}
			cout << endl;
		}
	}
	
};
int main()
{
	Node* head = NULL;
	Node* tail = NULL;
	Node* node = new Node();

	for (int i = 0; i < 5; i++)
	{
		node->append(head, tail, i + 1);
	}
	
	node->show(head);
	node->deleteKthFromTail(head, tail, 4);
	node->show(head);
}
