#include<iostream>
#include<stack>
#include<string>
using namespace std;
int main() {
	// making 2 stacks for value and operand
	stack<int>* val = new stack <int> ();
	stack<char>* ope = new stack<char>();
	string infix;
	cout << "ENTER INFIX EQUATION: " << endl;
	cin >> infix;
	// Traversing the string 
	for (int i = 0; i < infix.size(); i++)
	{
		// checking each character
		int ascii = (int)infix[i];
		// checking if the given character is digit ( 0 to 9 ) or not
		if (ascii >= 48 && ascii <= 57) {
			// if it is digit , push it in value stack
			val->push(ascii - 48);
		}
		else if (ope->empty() || ope->top()=='(' || infix[i]=='(') { ope->push(infix[i]); }
		else if (infix[i] == ')') {
			while (ope->top() != '(') {
				int val2 = val->top();
				val->pop();
				int val1 = val->top();
				val->pop();
				
				if (ope->top() == '+') { val->push(val1 + val2); }
				if (ope->top() == '-') { val->push(val1 - val2); }
				if (ope->top() == '*') { val->push(val1 * val2); }
				if (ope->top() == '/') { val->push(val1 / val2); }
				ope->pop();
			}
			ope->pop();
		}
		else if (infix[i] == '+' || infix[i] == '-') {
			int val2 = val->top();
			val->pop();
			int val1 = val->top();
			val->pop();
			if (ope->top() == '+') { val->push(val1 + val2); }
			if (ope->top() == '-') { val->push(val1 - val2); }
			if (ope->top() == '*') { val->push(val1 * val2); }
			if (ope->top() == '/') { val->push(val1 / val2); }
			ope->pop();
			ope->push(infix[i]);
		}
		else if (infix[i] == '*' || infix[i] == '/') {
			if (ope->top() == '*') {
				int val2 = val->top();
				val->pop();
				int val1 = val->top();
				val->pop();
				val->push(val1 * val2);
				ope->pop();
				ope->push(infix[i]);
			}
			else if (ope->top() == '/')
			{
				int val2 = val->top();
				val->pop();
				int val1 = val->top();
				val->pop();
				val->push(val1 / val2);
				ope->pop();
				ope->push(infix[i]);
			}
			else if (ope->top() == '+' || ope->top() == '-') {
				ope->push(infix[i]);
			}
		}
	}
	// after loop traversal , see if the operator stack is empty or not
	while (val->size() >1) {
		int val2 = val->top();
		val->pop();
		int val1 = val->top();
		val->pop();
		if (ope->top() == '*') { val->push(val1 * val2); }
		if (ope->top() == '/') { val->push(val1 / val2); }
		if (ope->top() == '+') { val->push(val1 + val2); }
		if (ope->top() == '-') { val->push(val1 - val2); }
		ope->pop();
	}
	cout << val->top() << endl;
}
