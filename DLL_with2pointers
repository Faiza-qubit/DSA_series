#include<iostream>
using namespace std;
class Node {
private:
	int data;
	Node* prev;
	Node* next;
	friend class DLL;
public:
	Node(int d, Node* p, Node* n)
	{
		data = d;
		prev = p;
		next = n;
	}
	Node(int d)
	{
		data = d;
		prev = next = NULL;
	}
	void show()
	{
		cout << data << endl;
		cout << prev->data << endl;
		cout << next->data << endl;
	}
};
class DLL {
private:
	Node* head;
	Node* tail;
public:
	DLL()
	{
		head = tail = NULL;
	}
	DLL(Node* n)
	{
		head = tail = n;
	}
	DLL(int d)
	{	
		
	}
	void Append(int data)
	{
		if (head == NULL)
		{
			head = new Node(data);
			tail = head;
		}
		else {
			Node* tmp = new Node(data);
			Node* temp = tail;
			tail->next = tmp;
			tmp->prev = tail;
			tail = tmp;
		}
	}
	void AttachFirst(int data)
	{
		// no NODE EXISTENCE
		if (head == NULL)
		{
			cout << "NO ELEMENT EXISTS IN THE LIST" << endl;
			char choice;
			do {

				cout << "Do you want to enter data as first element ? (Y/N) " << endl;
				cin >> choice;
			} while (choice != 'Y' && choice != 'N');
			if (choice == 'N') {
				return;
			}
			else if (choice == 'Y')
			{
				head = new Node(data);
				tail = head;
			}
		}

		else
		{
			Node* temp = new Node(data);
			head->prev = temp;
			temp->next = head;
			temp->prev = NULL;
			head = temp;
		}

	}
	// Add BEFORE some particular data
	void AddBefore(int ref, int data)
	{
		if (head == NULL)
		{
			cerr << "LIST IS EMPTY " << endl;
			return;
		}
		else if (head->data == ref)
		{
			Node* temp = new Node(data);
			AttachFirst(data);
		}
		else {
			Node* temp = head;
			while (temp->data != ref)
			{
				temp = temp->next;
				if (temp == NULL)
				{
					cout << "NO RECORD OCCURS " << endl;
					return;
				}
			}
			Node* node = new Node(data);
			temp->prev->next = node;
			node->prev = temp->prev->next;
			node->next = temp;
		}
	}
	// DELETION CODES

	//         -------    -----  |          ___   ____  ____
	//        |       |  |		 |         |                |       |
	//		  |		  |	 |----   |		   |                |       |
	//        |		  |  |       |         |-----           |       |----
	//		  |       |  |       |         |                |       |
	//         -------    -----  -------   |___         |       |___
	void deleteFirst()
	{
		if (head == NULL)
		{
			cout << "NO LIST EXISTS " << endl;
			return;
		}
		else if (head == tail)
		{
			delete head;
			head = nullptr;
			return;
		}
		else {
			Node* temp = head;
			head = head->next;
			delete temp;
		}
	}
	// DELETE Kth element
	void deleteKth(int pos)
	{
		if (pos == 1)
		{
			deleteFirst();
		}
		else {
			int cnt = 1;
			Node* temp = head;
			while (cnt != pos)
			{

				temp = temp->next;
				if (temp == NULL)
				{
					cout << "NO POSITION OCCURS" << endl;
					return;
				}

				cnt++;
			}
			Node* del = temp;
			if (temp->prev != NULL)
				temp->prev->next = temp->next;
			else if (temp->next != NULL)
				temp->next->prev = temp->prev;
			else
				tail = temp->prev;
			delete temp;
		}
	}
	void deleteAll()
	{
		Node* temp = head;
		while (temp != NULL)
		{
			Node* tmp = temp;
			temp = temp->next;
			delete tmp;

		}
		head = nullptr;
	}
	// REVERSE PRINTING of the DLL
	void reversePrinting()
	{
		cout << "----REVERSE LIST----" << endl;
		Node* temp = tail;
		while (temp != NULL)
		{
			cout << temp->data << " ";
			temp = temp->prev;
		}

	}
	// REVERSE of the DLL
	void REVERSE()
	{
		Node* prev = NULL;
		Node* after = NULL;
		Node* temp = head;
		while (temp != NULL)
		{
			after = temp->next;

			temp->next = prev;
			temp->prev = after;


			prev = temp;
			temp = after;

		}
		Node* t = head;
		head = tail;
		tail = temp;

	}
	void show()
	{
		if (head == NULL)
		{
			cout << "NO LIST EXISTS " << endl;
			return;
		}
		Node* temp = head;
		while (temp != NULL)
		{
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}
};
void showMenu()
{
	cout << "Menu:" << endl;
	cout << "1. Show list" << endl;
	cout << "2. Attach at start" << endl;
	cout << "3. Add before" << endl;
	cout << "4. Delete first" << endl;
	cout << "5. Delete all" << endl;
	cout << "6. Delete kth" << endl;
	cout << "7. Reverse (in-place)" << endl;
	cout << "8. Append the list " << endl;
	cout << "9. Reverse Printing of the list  " << endl;
	cout << "10. Exit " << endl;
	cout << "Enter your choice: ";
}
int main()
{
	int data;
	DLL* list = new DLL();

	int choice, ref;
	while (true) {
		showMenu();
		cin >> choice;
		switch (choice) {
		case 1:
			list->show();
			break;
		case 2:
			cout << "Enter the data you want to add in the list: ";
			cin >> data;
			list->AttachFirst(data);
			break;
		case 3:
			cout << "Enter reference: ";
			cin >> ref;
			cout << "Enter the data you want to add in the list: ";
			cin >> data;
			list->AddBefore(ref, data);
			break;
		case 4:
			list->deleteFirst();
			break;
		case 5:
			list->deleteAll();
			break;
		case 6:
			cout << "Enter position to delete: ";
			cin >> ref;
			list->deleteKth(ref);
			break;
		case 7: {
			list->REVERSE();
			break;
		}
		case 8:
		{
			int d;
			cout << "Enter the data you want to append the list with ? " << endl;
			cin >> d;
			list->Append(d);
			break;
		}
		case 9:
		{
			list->reversePrinting();
			break;
		}
		case 10:
			delete list;
			return 0;
			break;


		default:
			cout << "Invalid choice, please try again." << endl;
		}
	}

	return 0;

}
