#include<iostream>
using namespace std;
class Node {
private:
	int data;
	Node* next;
	friend class SLL;
public:
	Node() {
		data = 0;
		next = NULL;
	}
	Node(int d)
	{
		data = d;
		next = NULL;
	}
	// destructor
	// { no NEED of destructor here because SLL will delete the NODES themselves } 

};

class SLL {
private:
	Node* start;
public:
	SLL()
	{
		start = NULL;
	}
	SLL(int d)
	{
		start = new Node(d);

	}
	// appending the list 
	void append(int d)
	{
		if (start == NULL)
		{
			Node* temp = new Node(d);
			start = temp;
		}
		else {
			Node* t1 = start;
			while (t1->next != NULL)
			{
				t1 = t1->next;

			}
			t1->next = new Node(d);
		}
	}
	// attach at first of the list
	void AttachAtStart(int d)
	{
		if (start == NULL)
		{
			start = new Node(d);
			return;
		}
		Node* temp = new Node(d);
		temp->next = start;
		start = temp;
	}
	// attach BEFORE some particular data
	void AddBefore(int ref, int d)
	{
		if (start == NULL)
		{
			cout << "NO INSTANCE OF THIS RECORD FOUND " << endl;
			return;
		}
		else if (start->data == ref)
		{
			Node* temp = new Node(d);
			temp->next = start;
			start = temp;
			return;
		}
		else {
			Node* temp = start;
			Node* prev = NULL;
			while (temp->data != ref)
			{
				prev = temp;
				temp = temp->next;
				if (temp == NULL)
				{
					cout << "NO RECORD FOUND " << endl;
					return;
				}
			}
			Node* t1 = new Node(d);
			prev->next = t1;
			t1->next = temp;
		}
	}
	// DELETION CODES

	//         -------    -----  |          ___   ____  ____
	//        |       |  |		 |         |                |       |
	//		  |		  |	 |----   |		   |                |       |
	//        |		  |  |       |         |-----           |       |----
	//		  |       |  |       |         |                |       |
	//         -------    -----  -------   |___         |       |___


	void deleteFirst()
	{
		if (start == NULL)
		{
			cout << "NO LIST EXISTS " << endl;
			return;
		}
		else if (start->next == NULL) {
			delete start;
			start = nullptr;
			return;
		}
		else {
			Node* temp = start;
			start = start->next;
			delete temp;
		}
	}
	// delete ALL LIST 
	void deleteAll()
	{

		Node* temp = start;
		while (temp != NULL)
		{
			Node* current = temp->next;
			delete temp;
			temp = current;
		}
		start = nullptr;

	}
	// DELETING Kth element
	void deleteKth(int pos)
	{
		if (pos == 1)
		{
			Node* temp = start->next;
			delete start;
			start = temp;
		}
		else {
			int cnt = 1;
			Node* temp = start;
			Node* prev = NULL;
			while (cnt != pos)
			{
				prev = temp;
				temp = temp->next;
				cnt++;
				if (temp == NULL)
				{
					cout << "NO POSITION EXISTS " << endl;
					return;
				}
			}
			prev->next = temp->next;
			delete temp;
		}
	}
	// printing the reverse 
	void printReverse()
	{
		cout << "------PRINTING THE REVERSE OF LIST------" << endl;
		Node* temp = start;
		int cnt = 0;
		while (temp != NULL)
		{
			cnt++;
			temp = temp->next;
		}
		for (int i = cnt - 1; i >= 0; i--)
		{
			Node* temp = start;
			for (int j = 0; j < i; j++)
			{
				temp = temp->next;
			}
			cout << temp->data << " ";

		}
	}


	// REVERSING THE LINKED LIST 
	
	void Reverse()
	{
		Node* prev = NULL;
		Node* current = start;
		Node* after = NULL;
		while (current != NULL)
		{
			after = current->next;
			current->next = prev;
			prev = current;
			current = after;

		}
		start = prev;
	}
	// implementing the show function
	void show()
	{
		if (start == NULL)
		{
			cout << "NO LIST EXISTS " << endl;
			return;
		}
		cout << "-----LINKED LIST-----" << endl;
		Node* temp = start;
		while (temp != NULL)
		{
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}

	// DESTRUCTOR
	~SLL()
	{
		Node* temp = start;
		while (temp != NULL)
		{
			Node* current = temp->next;
			delete temp;
			temp = current;

		}
		start = nullptr;
	}
};
void showMenu() {
	cout << "Menu:" << endl;
	cout << "1. Show list" << endl;
	cout << "2. Attach at start" << endl;
	cout << "3. Add before" << endl;
	cout << "4. Delete first" << endl;
	cout << "5. Delete all" << endl;
	cout << "6. Delete kth" << endl;
	cout << "7. Reverse (in-place)" << endl;
	cout << "8. Append the list " << endl;
	cout << "9. Reverse printing of the list  " << endl;
	cout << "10. Exit " << endl;
	cout << "Enter your choice: ";
}

int main() {
	int data;
	cout << "Enter the data you want to start the list with: ";
	cin >> data;
	SLL* list = new SLL(data);

	int choice, ref;
	while (true) {
		showMenu();
		cin >> choice;
		switch (choice) {
		case 1:
			list->show();
			break;
		case 2:
			cout << "Enter the data you want to add in the list: ";
			cin >> data;
			list->AttachAtStart(data);
			break;
		case 3:
			cout << "Enter reference: ";
			cin >> ref;
			cout << "Enter the data you want to add in the list: ";
			cin >> data;
			list->AddBefore(ref, data);
			break;
		case 4:
			list->deleteFirst();
			break;
		case 5:
			list->deleteAll();
			break;
		case 6:
			cout << "Enter position to delete: ";
			cin >> ref;
			list->deleteKth(ref);
			break;
		case 7: {
			list->Reverse();
			break;
		}
		case 8:

		{
			int d;
			cout << "Enter the data you want to append the list with ? " << endl;
			cin >> d;
			list->append(d);
			break;
		}
		case 9:
		{
			list->printReverse();
			break;
		}
		case 10:
			delete list;
			return 0;
			break;
		
			
		default:
			cout << "Invalid choice, please try again." << endl;
		}
	}

	return 0;
}
